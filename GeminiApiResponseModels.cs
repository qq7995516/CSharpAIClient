using System.Collections.Generic;
using System.Text.Json.Serialization;
namespace CSharpAIClient
{
    /// <summary>
    /// Details about the tokens used for a specific modality in the prompt.
    /// 有关提示中特定模态所用令牌的详细信息。
    /// </summary>
    public class GeminiPromptTokenDetail
    {
        /// <summary>
        /// The modality type (e.g., "TEXT").
        /// 模态类型（例如，“TEXT”）。
        /// </summary>
        [JsonPropertyName("modality")]
        public string Modality { get; set; }

        /// <summary>
        /// The number of tokens used for this modality in the prompt.
        /// 提示中此模态使用的令牌数。
        /// </summary>
        [JsonPropertyName("tokenCount")]
        public int TokenCount { get; set; }
    }

    /// <summary>
    /// Metadata related to the usage of tokens in the API call.
    /// 与 API 调用中令牌使用相关的元数据。
    /// </summary>
    public class GeminiUsageMetadata
    {
        /// <summary>
        /// The number of tokens in the prompt.
        /// 提示中的令牌数。
        /// </summary>
        [JsonPropertyName("promptTokenCount")]
        public int PromptTokenCount { get; set; }

        /// <summary>
        /// The total number of tokens in the generated candidates.
        /// 生成的候选内容中的总令牌数。
        /// </summary>
        [JsonPropertyName("candidatesTokenCount")]
        public int CandidatesTokenCount { get; set; }

        /// <summary>
        /// The total number of tokens for the entire request and response.
        /// 整个请求和响应的总令牌数。
        /// </summary>
        [JsonPropertyName("totalTokenCount")]
        public int TotalTokenCount { get; set; }

        /// <summary>
        /// Detailed breakdown of token usage by modality in the prompt.
        /// 提示中按模态划分的令牌使用情况的详细分类。
        /// </summary>
        [JsonPropertyName("promptTokensDetails")]
        public List<GeminiPromptTokenDetail> PromptTokensDetails { get; set; }

        /// <summary>
        /// The number of tokens related to internal thoughts or processing (if provided by the API).
        /// 与内部思考或处理相关的令牌数（如果 API 提供）。
        /// </summary>
        [JsonPropertyName("thoughtsTokenCount")]
        public int ThoughtsTokenCount { get; set; }
    }

    /// <summary>
    /// Represents a potential response candidate generated by the model.
    /// 表示由模型生成的潜在响应候选。
    /// </summary>
    public class GeminiCandidate
    {
        /// <summary>
        /// The generated content for this candidate.
        /// 此候选者生成的内容。
        /// </summary>
        [JsonPropertyName("content")]
        public GeminiContent Content { get; set; } // Reuses the common Content class // 重用通用的 Content 类

        /// <summary>
        /// The reason why the generation finished (e.g., "STOP", "MAX_TOKENS").
        /// 生成结束的原因（例如，“STOP”、“MAX_TOKENS”）。
        /// </summary>
        [JsonPropertyName("finishReason")]
        public string FinishReason { get; set; }

        /// <summary>
        /// The index of this candidate in the list of candidates.
        /// 此候选在候选列表中的索引。
        /// </summary>
        [JsonPropertyName("index")]
        public int Index { get; set; }

        // Note: safetyRatings could be added here if needed.
        // 注意：如果需要，可以在此处添加 safetyRatings。
        // [JsonPropertyName("safetyRatings")]
        // public List<SafetyRating> SafetyRatings { get; set; }
    }

    /// <summary>
    /// Represents the overall response structure received from the API.
    /// 表示从 API 接收到的整体响应结构。
    /// </summary>
    public class GeminiApiResponse
    {
        /// <summary>
        /// A list of generated response candidates.
        /// 生成的响应候选列表。
        /// </summary>
        [JsonPropertyName("candidates")]
        public List<GeminiCandidate> Candidates { get; set; }

        /// <summary>
        /// Metadata about the token usage for the request.
        /// 有关请求的令牌使用情况的元数据。
        /// </summary>
        [JsonPropertyName("usageMetadata")]
        public GeminiUsageMetadata UsageMetadata { get; set; }

        /// <summary>
        /// The version of the model that generated the response.
        /// 生成响应的模型版本。
        /// </summary>
        [JsonPropertyName("modelVersion")]
        public string ModelVersion { get; set; }
    }
}
